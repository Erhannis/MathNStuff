/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.erhannis.mathnstuff.components;

import com.erhannis.mathnstuff.FactoryHashMap;
import com.erhannis.mathnstuff.Stringable;
import com.erhannis.mathnstuff.utils.Factory;
import com.erhannis.mathnstuff.utils.Options;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.function.Function;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 * //TODO Allow set options //TODO Persist options
 *
 * @author erhannis
 */
public class OptionsFrame extends javax.swing.JFrame {
    public static final String DEFAULT_OPTIONS_FILENAME = "options.dat";
    public final String optionsFilename;
    private final DefaultListModel<Stringable<Entry<String, Object>>> listModel;
    private final Options options;

    /**
     * Creates new form OptionsFrame, defaulting to DEFAULT_OPTIONS_FILENAME ("options.dat" as of this writing) for filename.
     */
    public OptionsFrame(Options options) {
        this(options, "options.dat");
    }
    
    /**
     * Creates new form OptionsFrame
     */
    public OptionsFrame(Options options, String optionsFilename) {
        this.optionsFilename = optionsFilename;
        this.options = options;
        this.listModel = new DefaultListModel<>();
        options.getOrDefault("OptionsFrame.AUTOSAVE_OPTIONS", true); // Preloading default
        reload();
        initComponents();
    }

    private void reload() {
        listModel.clear();
        FactoryHashMap<Object, HashSet<String>> reverse = new FactoryHashMap<>(new Factory<Object, HashSet<String>>() {
            @Override
            public HashSet<String> construct(Object input) {
                return new HashSet<String>();
            }
        });
        //Collections.sort
        for (Entry<String, Object> e : options.getRecentEntries()) {
            Stringable<Entry<String, Object>> s = new Stringable<Entry<String, Object>>(e, e.getKey() + " : " + e.getValue());
            listModel.addElement(s);
            reverse.get(s.val.getValue()).add(s.val.getKey());
        }
        for (Entry<Object, HashSet<String>> e : reverse.entrySet()) {
            if (e.getValue().size() > 1) {
                System.err.println("Conflict on " + e.getKey() + " with " + String.join(", ", e.getValue()));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listOptions = new javax.swing.JList<>();
        btnReload = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Options");

        listOptions.setModel(listModel        );
        listOptions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listOptionsMouseClicked(evt);
            }
        });
        listOptions.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listOptionsKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(listOptions);

        btnReload.setText("Reload");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(331, Short.MAX_VALUE)
                .addComponent(btnReload)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnReload)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        reload();
    }//GEN-LAST:event_btnReloadActionPerformed

    private void listOptionsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listOptionsKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_SPACE) {
            select();
        } else if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            delete();
        }
    }//GEN-LAST:event_listOptionsKeyPressed

    private void listOptionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listOptionsMouseClicked
        if (evt.getClickCount() == 2) {
            select();
        }
    }//GEN-LAST:event_listOptionsMouseClicked

    private void select() {
        if (listOptions.getSelectedValuesList().size() == 1) {
            Entry<String,Object> e = listOptions.getSelectedValue().val;
            if (e.getValue() != null) {
                if (e.getValue() instanceof Boolean) {
                    options.set(e.getKey(), !(Boolean)e.getValue());
                } else if (e.getValue() instanceof String) {
                    String newValue = JOptionPane.showInputDialog(this, e.getKey() + " (string)", e.getValue());
                    if (newValue != null) {
                        options.set(e.getKey(), newValue);
                    }
                } else if (e.getValue() instanceof Character) {
                    String newValue = JOptionPane.showInputDialog(this, e.getKey() + " (character)", e.getValue());
                    if (newValue != null) {
                        if (newValue.length() != 1) {
                            JOptionPane.showMessageDialog(this, "Error, please enter a single character");
                            return;
                        }
                        options.set(e.getKey(), newValue.charAt(0));
                    }
                } else if (e.getValue() instanceof Integer) {
                    String newValue = JOptionPane.showInputDialog(this, e.getKey() + " (integer)", e.getValue());
                    if (newValue != null) {
                        int v = 0;
                        try {
                            v = Integer.parseInt(newValue);
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(this, "Error, please enter an integer");
                            return;
                        }
                        options.set(e.getKey(), v);
                    }
                } else if (e.getValue() instanceof Float) {
                    String newValue = JOptionPane.showInputDialog(this, e.getKey() + " (float)", e.getValue());
                    if (newValue != null) {
                        float v = 0;
                        try {
                            v = Float.parseFloat(newValue);
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(this, "Error, please enter a float");
                            return;
                        }
                        options.set(e.getKey(), v);
                    }
                } else if (e.getValue() instanceof Double) {
                    String newValue = JOptionPane.showInputDialog(this, e.getKey() + " (double)", e.getValue());
                    if (newValue != null) {
                        double v = 0;
                        try {
                            v = Double.parseDouble(newValue);
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(this, "Error, please enter a double (floating point number)");
                            return;
                        }
                        options.set(e.getKey(), v);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Sorry, unhandled datatype");
                    return;
                }
                if ((Boolean)options.getOrDefault("OptionsFrame.AUTOSAVE_OPTIONS", true)) {
                    try {
                        Options.saveOptions(options, optionsFilename);
                    } catch (IOException ex) {
                        Logger.getLogger(OptionsFrame.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "Failed to save options to disk.");
                    }
                }
                reload();
            } else {
                JOptionPane.showMessageDialog(this, "Sorry, null value; can't infer datatype");
                return;
            }
        }
    }
    
    private void delete() {
        if (!listOptions.getSelectedValuesList().isEmpty()) {
            if (JOptionPane.showConfirmDialog(this, "Delete options, potentially resetting them back to defaults?", "Delete options?", JOptionPane.YES_NO_CANCEL_OPTION) == JOptionPane.YES_OPTION) {
                for (Stringable<Entry<String, Object>> e : listOptions.getSelectedValuesList()) {
                    options.remove(e.val.getKey());
                }
                if ((Boolean)options.getOrDefault("OptionsFrame.AUTOSAVE_OPTIONS", true)) {
                    try {
                        Options.saveOptions(options, optionsFilename);
                    } catch (IOException ex) {
                        Logger.getLogger(OptionsFrame.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "Failed to save options to disk.");
                    }
                }
                reload();
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReload;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Stringable<Entry<String,Object>>> listOptions;
    // End of variables declaration//GEN-END:variables
}
